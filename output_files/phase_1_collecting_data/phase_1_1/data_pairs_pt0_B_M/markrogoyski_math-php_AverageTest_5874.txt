    /**
     * @test   describe
     * @throws \Exception
     */

    public function testDescribe()
    {
        // Given
        $numbers = [13, 18, 13, 14, 13, 16, 14, 21, 13];

        // When
        $averages = Average::describe($numbers);

        // Then
        $this->assertTrue(\is_array($averages));
        $this->assertArrayHasKey('mean', $averages);
        $this->assertArrayHasKey('median', $averages);
        $this->assertArrayHasKey('mode', $averages);
        $this->assertArrayHasKey('geometric_mean', $averages);
        $this->assertArrayHasKey('harmonic_mean', $averages);
        $this->assertArrayHasKey('contraharmonic_mean', $averages);
        $this->assertArrayHasKey('quadratic_mean', $averages);
        $this->assertArrayHasKey('trimean', $averages);
        $this->assertArrayHasKey('iqm', $averages);
        $this->assertArrayHasKey('cubic_mean', $averages);
        $this->assertTrue(\is_numeric($averages['mean']));
        $this->assertTrue(\is_numeric($averages['median']));
        $this->assertTrue(\is_array($averages['mode']));
        $this->assertTrue(\is_numeric($averages['geometric_mean']));
        $this->assertTrue(\is_numeric($averages['harmonic_mean']));
        $this->assertTrue(\is_numeric($averages['contraharmonic_mean']));
        $this->assertTrue(\is_numeric($averages['quadratic_mean']));
        $this->assertTrue(\is_numeric($averages['trimean']));
        $this->assertTrue(\is_numeric($averages['iqm']));
        $this->assertTrue(\is_numeric($averages['cubic_mean']));
    }
