    /**
     * Left Shift
     *
     * Shift the bits of $this $bits steps to the left
     * @param int|string|ArbitraryInteger $bits
     *
     * @return ArbitraryInteger
     *
     * @throws Exception\BadParameterException
     * @throws Exception\IncorrectTypeException
     */

    public function leftShift($bits)
    {
        $bits           = self::create($bits);
        $shifted_string = '';
        $length         = \strlen($this->base256);
        [$bytes, $bits] = $bits->fullIntdiv(8);
        $bits           = $bits->toInt();
        $carry          = 0;

        for ($i = 0; $i < $length; $i++) {
            $chr = \ord($this->base256[$i]);
            // If $shifted string is empty, donâ€™t add 0x00.
            $new_value = \chr($carry + \intdiv($chr << $bits, 256));
            if ($shifted_string !== "" || $new_value !== \chr(0)) {
                $shifted_string .= $new_value;
            }
            $carry = ($chr << $bits) % 256;
        }
        $shifted_string .= \chr($carry);

        // Pad $bytes of 0x00 on the right.
        $shifted_string = $shifted_string . \str_repeat(\chr(0), $bytes->toInt());

        return self::fromBinary($shifted_string, true);
    }
