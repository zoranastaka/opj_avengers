    /**
     * @test The class returns the correct scores
     *
     * R code for expected values:
     *   model$calres$scores
     *   new = matrix(c(1:9), 1, 9)
     *   result = predict(model, new)
     *   result$scores
     *
     * @throws \Exception
     */

    public function testScores()
    {
        // Given
        $expected = [
            [-195.45787,  -12.817386,  11.367951,  0.07519595,  2.05857003,  0.63151851,  0.10467453,  0.150178317,  0.1934049675],
            [-195.48933,  -12.851323,  11.673952,  0.57369576,  1.99062642,  0.57498297,  0.01784738,  0.126999901,  0.0575522934],
            [-142.47876,  -25.925585,  16.007775,  1.35005628, -1.23661732, -0.35871646,  0.53615242, -0.071470892, -0.1487746327],
            [-279.11234,   38.275802,  14.008493, -0.20554881, -0.74520008,  0.03578839, -0.18746661, -0.209313261,  0.2166434815],
            [-399.44962,   37.337313,   1.390017, -2.56068832, -0.42438018,  0.57015871,  0.06388460, -0.022480529,  0.2311564234],
            [-248.26987,   25.601818,  12.178339,  2.97131461, -1.08083910,  0.34511522, -0.01670047, -0.481720506,  0.0767848565],
            [-435.38499,  -20.953066, -13.841554, -0.83891849, -0.86770335,  0.05234928, -0.27524798,  0.287312900,  0.3452018215],
            [-159.59972,   20.042888,  23.313928,  1.01934880,  0.85969188, -0.90915257, -0.18322610, -0.248616163, -0.1164567144],
            [-171.70640,  -10.761352,  18.305492,  4.34965233, -0.83680254, -1.20782456, -0.06067236, -0.109100155,  0.3130107590],
            [-208.66846,  -19.667545,   8.926250,  2.51978278,  1.41086733,  0.29499409,  0.03888733,  0.115448332, -0.1776447352],
            [-208.62655,  -19.533213,   8.098429,  3.75885795,  1.26197094,  0.24225412,  0.21871549,  0.104086445, -0.0286965165],
            [-330.19078,  -10.618571,  -1.842712,  1.09331648, -0.40465236,  1.24220074, -0.33046600, -0.029498112, -0.4859434363],
            [-330.24415,  -10.739579,  -1.015554,  0.70050126, -0.46536594,  1.26208378, -0.36491819, -0.034165903, -0.1629512703],
            [-330.15616,  -10.508165,  -2.519028,  2.16787414, -0.58897482,  1.21280590, -0.09635696, -0.036129848, -0.0749149763],
            [-510.07271,   71.523155,  -8.515848,  0.81760309,  1.00995796, -1.26802021, -0.05494029, -0.068593421,  0.1689117259],
            [-505.01189,   56.857170, -10.272760,  0.99331068,  0.65006815, -1.18834129, -0.12703496,  0.001227491, -0.1379543568],
            [-495.92884,   33.297763,  -9.496840, -1.21662325,  0.21317268, -0.98609566, -0.67101407,  0.193859553, -0.4710513012],
            [-104.08701,  -19.760062,  28.309142, -2.53084772, -0.43683215,  0.07765118, -0.59136373,  0.002910856, -0.3053175375],
            [ -94.14870,   -9.304667,  28.419917, -2.10844588,  1.07322012,  0.03513718,  0.06327073,  0.781929609,  0.3060786532],
            [ -97.19011,  -23.100201,  29.848878, -2.89600421, -0.52878762,  0.16044946, -0.64075206,  0.099298974, -0.0005034673],
            [-154.85385,  -22.862071,  15.053448,  2.92401373, -1.88014886, -0.38343656, -0.13273358,  0.363705787,  0.2198320477],
            [-350.54795,   36.818436,   2.203481, -0.02376334, -0.01946931,  1.13947448,  0.33144174, -0.341203331,  0.0899595113],
            [-338.62585,   29.507884,   2.093187,  0.79067507, -0.16121324,  1.22402113,  0.57331589, -0.038444975,  0.1119933721],
            [-426.79654,  -26.040713, -14.911842, -0.35007535, -0.76695882,  0.10517054,  0.06195653,  0.718601326, -0.0854363280],
            [-433.57111,   58.170054,   2.196507, -3.61609521, -0.06684543,  0.11888020, -0.09649695, -0.092110971,  0.1117928259],
            [-104.04578,  -18.948372,  23.831391, -0.28483159, -0.50333550,  0.08690478,  0.21090379,  0.055549130, -0.0072789186],
            [-152.01907,  -18.162467,  18.205138, -2.07093828,  0.62168334, -0.72719823,  0.89264763, -0.094189076, -0.2713488812],
            [-142.14577,  -50.350393,  18.109568, -3.87552017, -0.42163132, -0.40180349, -0.04249360, -0.615482184,  0.0716817655],
            [-437.57716,  -41.803832, -16.101679, -2.54635213, -0.56609648, -0.34449193,  1.49008531, -0.021591262, -0.0812773586],
            [-216.20281,  -75.151468,  -0.498672,  0.62582833,  1.96041194,  0.12038386, -0.16816853, -0.434748871,  0.0724077975],
            [-431.68366, -127.608466, -28.403655, -0.37292768,  0.12042128, -0.58497179, -0.59990301, -0.248999660,  0.2229792125],
            [-161.77699,  -32.447174,  12.507458,  2.03583649, -0.71655509, -0.76700401,  0.35823800,  0.214037980, -0.2659514877],
        ];

        // And since each column could be multiplied by -1, we will compare the two and adjust.
        $scores = self::$pca->getScores();
        $score_array = $scores->getMatrix();

        // Get an array that's roughly ones and negative ones.
        $quotiant = Multi::divide($expected[1], $score_array[1]);

        // Convert to exactly one or negative one. Cannot be zero.
        $signum = \array_map(
            function ($x) {
                return $x <=> 0;
            },
            $quotiant
        );
        $signature = MatrixFactory::diagonal($signum);

        // Multiplying a sign change matrix on the right changes column signs.
        $sign_adjusted = $scores->multiply($signature);

        // Then
        $this->assertEqualsWithDelta($expected, $sign_adjusted->getMatrix(), .00001);

        // And Given
        $expected = MatrixFactory::create([[-5.360422, -2.956055, 5.67008, 7.705329, 11.08508, -2.525982, 3.526032, -0.6236968, -3.731516]]);
        $sign_adjusted = $expected->multiply($signature);

        // When
        $scores = self::$pca->getScores(MatrixFactory::create([[1,2,3,4,5,6,7,8,9]]));

        // Then
        $this->assertEqualsWithDelta($sign_adjusted->getMatrix(), $scores->getMatrix(), .00001);
    }
