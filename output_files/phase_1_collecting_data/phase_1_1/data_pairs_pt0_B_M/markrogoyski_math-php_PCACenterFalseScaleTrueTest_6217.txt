    /**
     * @test The class returns the correct scores
     *
     * R code for expected values:
     *   model$calres$scores
     *   new = matrix(c(1:9), 1, 9)
     *   result = predict(model, new)
     *   result$scores
     *
     * @throws \Exception
     */

    public function testScores()
    {
        // Given
        $expected = [
            [-14.35066, -0.65965959,  1.2016258,  0.15487538, -0.299362630, -0.45941646,  0.40319925,  0.28569240,  0.159949082],
            [-14.62235, -0.59195135,  0.9825213,  0.32008269, -0.303995255, -0.41425005,  0.43247921,  0.25084881,  0.068866965],
            [-14.55682, -2.29042326, -0.2911804,  0.03077448, -0.007060303,  0.42965952, -0.41191416,  0.17374023, -0.127024712],
            [-14.34867, -0.22505382, -1.9614721, -0.20932669,  0.443716831,  0.02614755, -0.02775485, -0.05880444,  0.143964740],
            [-14.01070,  1.54954215, -0.8094368, -1.02132719,  0.247787154, -0.08881788,  0.06248158,  0.03235842,  0.159602626],
            [-14.25782,  0.02861675, -2.4333452,  0.46215743,  0.706518179,  0.05364997, -0.24431736,  0.26481478,  0.003159298],
            [-13.76947,  2.66307496,  0.3781640, -0.46684763, -0.114018898, -0.35185110, -0.42243004, -0.31894716,  0.175042030],
            [-15.25532, -1.92631374, -0.8282702,  0.78624311,  0.135325909,  0.39218068,  0.39409779, -0.09539406,  0.005222661],
            [-16.55300, -1.98750454, -1.4302883,  1.19558483,  0.026039043,  0.24679166, -0.52147213, -0.09786046,  0.194498654],
            [-15.22340, -0.24443784,  0.5328860,  0.74229318, -0.413210410, -0.21849364,  0.24727610,  0.24441794, -0.103751531],
            [-15.39917, -0.20218107,  0.3489316,  0.93456390, -0.448673945, -0.20395783,  0.05784849,  0.37867798, -0.015259641],
            [-14.14199,  1.87458933, -0.7253186, -0.05774572,  0.126266949, -0.39508414,  0.08855680,  0.08868195, -0.394565209],
            [-14.17486,  1.66265942, -0.7131462, -0.17048646,  0.254990715, -0.55190140, -0.02804934,  0.06441817, -0.191165130],
            [-14.25924,  1.78256558, -0.8497805,  0.04452587,  0.155233971, -0.48130854, -0.21521520,  0.25184178, -0.139833047],
            [-14.60887,  3.73267398, -1.0214334,  0.53684683, -0.205676916,  0.55854838,  0.31175310, -0.12993899,  0.247897004],
            [-14.65667,  3.80212820, -0.9207854,  0.52743129, -0.321566390,  0.58890438,  0.29088998, -0.20288424,  0.024306771],
            [-14.85825,  3.45003695, -0.5639484,  0.06674281, -0.372044072,  0.36908124,  0.42439661, -0.63764289, -0.226133832],
            [-15.33241, -3.34286781, -0.4329398, -0.42313731,  0.251613808, -0.12879000,  0.28498558, -0.43633349, -0.215820012],
            [-15.53280, -3.71292186,  0.7019771, -0.67160778, -1.081438617, -0.43658913,  0.21820869, -0.14587649,  0.248520179],
            [-15.58065, -3.71345479, -0.3978123, -0.58738381,  0.240581290, -0.35172158,  0.15075281, -0.48083802, -0.029942225],
            [-14.50305, -1.90345352, -1.5451798,  0.25228324, -0.423902509, -0.17229477, -0.74262863, -0.21893809,  0.065538523],
            [-13.41987,  1.68028135, -1.0770843, -0.45068058,  0.528758276, -0.09444063,  0.10534783,  0.49961873,  0.046117853],
            [-13.87438,  1.40647490, -0.9492607, -0.53727629,  0.018703256, -0.16906811, -0.07526003,  0.59441255,  0.049027104],
            [-14.06626,  2.59631600,  0.7614411, -0.63982126, -0.974969958, -0.21009585, -0.37243065, -0.22405212, -0.092804106],
            [-14.11365,  1.85513174, -0.9735096, -1.01318751,  0.296084716,  0.15292354,  0.34158820, -0.13939186,  0.134046728],
            [-14.86170, -3.10412644, -0.2259207, -0.27232178, -0.035544826,  0.02059226, -0.10981384,  0.06311741, -0.023721124],
            [-14.95215, -2.70656972,  1.6579182, -0.36675494, -0.149104693,  0.79943145,  0.23329711,  0.24505429, -0.092191003],
            [-14.50548, -2.90865277,  1.4561922, -0.43367260,  1.206753297,  0.30568948,  0.04627864, -0.20758638,  0.036786117],
            [-15.05003,  1.68781721,  2.9714326, -1.08305855, -0.141138310,  0.85068735, -0.40936761,  0.45847020, -0.031808329],
            [-14.46037,  0.12093755,  2.8433751,  0.95556921,  0.630111488, -0.27406595,  0.25773517,  0.12944592,  0.037880250],
            [-14.95663,  3.11502916,  3.9273674,  0.69992324,  0.712383681, -0.31613525, -0.45139048, -0.50859225,  0.057149291],
            [-14.94864, -1.82710616,  0.1050937,  0.36176865, -0.537268693,  0.40688978, -0.32561122, -0.00975516, -0.179051914],
        ];

        // And since each column could be multiplied by -1, we will compare the two and adjust.
        $scores = self::$pca->getScores();
        $score_array = $scores->getMatrix();

        // Get an array that's roughly ones and negative ones.
        $quotiant = Multi::divide($expected[1], $score_array[1]);

        // Convert to exactly one or negative one. Cannot be zero.
        $signum = \array_map(
            function ($x) {
                return $x <=> 0;
            },
            $quotiant
        );
        $signature = MatrixFactory::diagonal($signum);

        // Multiplying a sign change matrix on the right changes column signs.
        $sign_adjusted = $scores->multiply($signature);

        // Then
        $this->assertEqualsWithDelta($expected, $sign_adjusted->getMatrix(), .00001);

        // And Given
        $expected = MatrixFactory::create([[-13.01415, 0.0006325086, 7.995322, 4.104522, -2.536586, 3.716645, 3.300201, 2.357735, -1.860735]]);
        $sign_adjusted = $expected->multiply($signature);

        // When
        $scores = self::$pca->getScores(MatrixFactory::create([[1,2,3,4,5,6,7,8,9]]));

        // Then
        $this->assertEqualsWithDelta($sign_adjusted->getMatrix(), $scores->getMatrix(), .00001);
    }
