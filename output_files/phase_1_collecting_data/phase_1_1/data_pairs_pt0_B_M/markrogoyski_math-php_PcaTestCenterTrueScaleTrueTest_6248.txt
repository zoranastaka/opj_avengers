    /**
     * @test The class returns the correct scores
     *
     * R code for expected values:
     *   model$calres$scores
     *   new = matrix(c(1:9), 1, 9)
     *   result = predict(model, new)
     *   result$scores
     *
     * @throws \Exception
     */

    public function testScores()
    {
        // Given
        $expected = [
            [-0.66422351, 1.1734476, -0.20431724, -0.12601751, 0.75200784, -0.12506777, -0.42357334, -0.003259165, -0.167051112],
            [-0.63719807, 0.9769448, 0.11077779, -0.08567709, 0.65668822, -0.06619437, -0.44849307, 0.056643244, -0.071592094],
            [-2.29973601, -0.3265893, -0.21014955, -0.10862524, -0.07622329, -0.56693648, 0.38612406, -0.202035744, 0.11450503],
            [-0.2152967, -1.9768101, -0.32946822, -0.30806225, -0.24391787, 0.08382435, 0.03299362, -0.023714111, -0.145255757],
            [1.58697405, -0.8287285, -1.03299254, 0.14738418, -0.22270405, 0.18280435, -0.05793795, 0.152342587, -0.154646072],
            [0.04960512, -2.4466838, 0.11177774, -0.87154914, -0.12574876, -0.23043022, 0.22451528, 0.098663134, -0.004233901],
            [2.71439677, 0.3610529, -0.65206041, 0.09633337, 0.29674234, 0.27763557, 0.44227307, -0.306373481, -0.18698081],
            [-2.04370658, -0.8006412, 0.84898795, -0.27451338, -0.26307848, -0.19042527, -0.394164, -0.187088365, -0.01046133],
            [-2.29506729, -1.3056004, 1.9684845, 0.05055875, -0.45988113, 0.20443847, 0.53713423, 0.413455512, -0.169005773],
            [-0.38252133, 0.5811211, 0.88632274, 0.07026946, 0.45835852, -0.07984989, -0.26113412, 0.204105964, 0.110461785],
            [-0.36652708, 0.4121971, 1.1486095, 0.06150898, 0.48309076, -0.16066456, -0.07979514, 0.352641772, 0.027108266],
            [1.88466875, -0.7241198, -0.20604588, -0.21856675, 0.27996207, 0.17135058, -0.0891448, 0.092140434, 0.396034809],
            [1.67107231, -0.7144354, -0.32644071, -0.28933625, 0.28061777, 0.33682412, 0.03346598, 0.182323579, 0.196526577],
            [1.77692371, -0.8411687, -0.08557921, -0.28421711, 0.34961695, 0.13926264, 0.20632469, 0.295340402, 0.147796262],
            [3.64958983, -0.9480878, 0.88315862, 0.21645793, -0.34788247, -0.24002207, -0.31053111, -0.171865268, -0.251117818],
            [3.71033756, -0.8426945, 0.93230325, 0.34099021, -0.34260485, -0.22646211, -0.28589695, -0.239313268, -0.028994385],
            [3.331963, -0.4805609, 0.67061959, 0.65189724, -0.43940743, 0.3104575, -0.38304409, -0.359765688, 0.223097923],
            [-3.45236266, -0.4327074, -0.22604214, 0.10018032, -0.33470301, 0.57303421, -0.24650594, -0.066340528, 0.220271421],
            [-3.85477722, 0.7084152, -0.22670973, 1.19340342, 0.53954318, 0.37207104, -0.20055288, 0.087333576, -0.241702175],
            [-3.85488283, -0.3872111, -0.25488964, 0.21962306, -0.30372397, 0.83750899, -0.10186868, 0.104053562, 0.042833437],
            [-1.90375523, -1.5725638, 0.06620424, 0.07989679, 0.5012657, -0.07212137, 0.74680802, -0.408144457, -0.082722856],
            [1.80402354, -1.1340965, -1.00776416, -0.58796239, 0.09903732, -0.33920894, -0.14045443, 0.156086022, -0.050247532],
            [1.46483534, -0.9777629, -0.76680342, -0.03308788, 0.26871378, -0.31479492, 0.03753417, 0.370979414, -0.043466032],
            [2.60135738, 0.7649595, -0.4891514, 0.9524755, 0.53065965, 0.05970074, 0.38212238, -0.28961299, 0.08206984],
            [1.87424485, -0.9791561, -0.89787633, 0.22438738, -0.50770999, 0.20785973, -0.32709161, 0.027471038, -0.130958896],
            [-3.14830645, -0.2552569, -0.36230545, 0.06406082, 0.03361267, -0.0958673, 0.1035227, -0.020876499, 0.021084764],
            [-2.77939557, 1.6373369, -0.35969974, 0.3188654, -0.4325103, -0.69006515, -0.2631312, -0.105695694, 0.085027267],
            [-2.90895427, 1.3962368, -0.91635036, -0.90254314, -0.75861156, 0.05473409, -0.03491081, -0.236552376, -0.04634105],
            [1.54812696, 3.0206982, -0.51945216, 0.8656085, -0.86048411, -0.50704173, 0.37940892, 0.548070377, 0.053196712],
            [0.08049995, 2.8346567, 0.34481747, -1.14659658, 0.29944552, -0.08124583, -0.26924964, -0.123537656, -0.047915313],
            [2.96252801, 3.9993896, 0.70296512, -0.73000448, -0.22756074, 0.65580986, 0.49422807, -0.082329298, -0.053112079],
            [-1.90443632, 0.108419, 0.39906976, 0.31285789, 0.11738974, -0.48091826, 0.31102454, -0.315146031, 0.165790892],
        ];

        // And since each column could be multiplied by -1, we will compare the two and adjust.
        $scores = self::$pca->getScores();
        $score_array = $scores->getMatrix();

        // Get an array that's roughly ones and negative ones.
        $quotiant = Multi::divide($expected[1], $score_array[1]);

        // Convert to exactly one or negative one. Cannot be zero.
        $signum = \array_map(
            function ($x) {
                return $x <=> 0;
            },
            $quotiant
        );
        $signature = MatrixFactory::diagonal($signum);

        // Multiplying a sign change matrix on the right changes column signs.
        $sign_adjusted = $scores->multiply($signature);

        // Then
        $this->assertEqualsWithDelta($expected, $sign_adjusted->getMatrix(), .00001);

        // And Given
        $expected = MatrixFactory::create([[0.1257286, 7.899684, 2.327884, -0.366373, 1.284736, -5.869623, -3.59103, -1.97999, 1.738207]]);
        $sign_adjusted = $expected->multiply($signature);

        // When
        $scores = self::$pca->getScores(MatrixFactory::create([[1,2,3,4,5,6,7,8,9]]));

        // Then
        $this->assertEqualsWithDelta($sign_adjusted->getMatrix(), $scores->getMatrix(), .00001);
    }
