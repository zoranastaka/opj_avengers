    /**
     * Executes the callback function for the problem and returns
     * sum of the gradient for all samples & targets.
     */

    protected function gradient(array $theta): array
    {
        [, $updates, $penalty] = parent::gradient($theta);

        // Calculate gradient for each dimension
        $gradient = [];
        for ($i = 0; $i <= $this->dimensions; ++$i) {
            if ($i === 0) {
                $gradient[$i] = array_sum($updates);
            } else {
                $col = array_column($this->samples, $i - 1);
                $error = 0;
                foreach ($col as $index => $val) {
                    $error += $val * $updates[$index];
                }

                $gradient[$i] = $error + $penalty * $theta[$i];
            }
        }

        return $gradient;
    }
