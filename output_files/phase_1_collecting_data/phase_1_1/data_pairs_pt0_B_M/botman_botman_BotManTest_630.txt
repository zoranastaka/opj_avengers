/**
 * Class BotManTest.
 */

class BotManTest extends TestCase
{
    use \Mockery\Adapter\Phpunit\MockeryPHPUnitIntegration;

    /** @var MockInterface */
    protected $commander;

    /** @var ArrayCache */
    protected $cache;

    protected function tearDown(): void
    {
        m::close();
    }

    protected function setUp(): void
    {
        parent::setUp();
        $this->cache = new ArrayCache();
    }

    protected function getBot($data)
    {
        $botman = BotManFactory::create([], $this->cache);

        $data = Collection::make($data);
        /** @var FakeDriver $driver */
        $driver = m::mock(FakeDriver::class)->makePartial();

        $driver->isBot = $data->get('is_from_bot', false);

        $messages = $data->get('message');

        if (! is_array($messages)) {
            $messages = [$messages];
        }

        $driver->messages = array_map(function ($message) use ($data) {
            return new IncomingMessage($message, $data->get('sender'), $data->get('recipient'));
        }, $messages);

        $botman->setDriver($driver);

        return $botman;
    }

    protected function getBotWithInteractiveData($payload)
    {
        /** @var \Illuminate\Http\Request $request */
        $request = new \Illuminate\Http\Request();
        $request->replace([
            'payload' => $payload,
        ]);

        return BotManFactory::create([], $this->cache, $request);
    }

    /** @test */
    public function it_does_not_hear_commands()
    {
        $called = false;

        $botman = $this->getBot([
            'user' => 'U0X12345',
            'text' => 'bar',
        ]);

        $botman->hears('foo', function ($bot) use (&$called) {
            $called = true;
        });
        $botman->listen();
        $this->assertFalse($called);
    }

    /** @test */
    public function it_does_not_hear_commands_and_uses_fallback()
    {
        $called = false;
        $fallbackCalled = false;

        $botman = $this->getBot([
            'event' => [
                'user' => 'U0X12345',
                'text' => 'bar',
            ],
        ]);

        $botman->fallback(function ($bot) use (&$fallbackCalled) {
            $fallbackCalled = true;
        });

        $botman->hears('foo', function ($bot) use (&$called) {
            $called = true;
        });

        $botman->listen();
        $this->assertFalse($called);
        $this->assertTrue($fallbackCalled);
    }

    /** @test */
    public function it_does_not_use_fallback_for_conversation_replies()
    {
        $GLOBALS['answer'] = '';
        $GLOBALS['called'] = false;
        $fallbackCalled = false;

        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Hi Julia',
        ]);

        $botman->hears('Hi Julia', function ($botman) {
            $conversation = new TestConversation();

            $botman->storeConversation($conversation, function ($answer) use (&$called) {
                $GLOBALS['answer'] = $answer;
                $GLOBALS['called'] = true;
            });
        });
        $botman->listen();

        /*
         * Now that the first message is saved, fake a reply
         */
        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Hello again',
        ]);

        $botman->fallback(function ($bot) use (&$fallbackCalled) {
            $fallbackCalled = true;
        });
        $botman->listen();

        $this->assertInstanceOf(Answer::class, $GLOBALS['answer']);
        $this->assertFalse($GLOBALS['answer']->isInteractiveMessageReply());
        $this->assertSame('Hello again', $GLOBALS['answer']->getText());
        $this->assertTrue($GLOBALS['called']);

        $this->assertFalse($fallbackCalled);
    }

    /** @test */
    public function it_does_not_use_fallback_for_bot_replies()
    {
        $called = false;
        $fallbackCalled = false;

        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Hello again',
            'is_from_bot' => true,
        ]);

        $botman->fallback(function ($bot) use (&$fallbackCalled) {
            $fallbackCalled = true;
        });

        $botman->hears('foo', function ($bot) use (&$called) {
            $called = true;
        });

        $botman->listen();
        $this->assertFalse($called);
        $this->assertFalse($fallbackCalled);
    }

    /** @test */
    public function it_hears_matching_commands()
    {
        $called_once = false;
        $called_twice = false;

        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Foo',
        ]);

        $botman->hears('Foo', function ($bot) use (&$called_once) {
            $called_once = true;
        });

        $botman->hears('Foo(.*)', function ($bot) use (&$called_twice) {
            $called_twice = true;
        });

        $botman->listen();
        $this->assertTrue($called_once);
        $this->assertTrue($called_twice);
    }

    /** @test */
    public function it_hears_matching_commands_from_array()
    {
        $called = 0;

        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => ['Foo', 'Bar'],
        ]);

        $botman->hears(['Foo', 'Bar'], function ($bot) use (&$called) {
            $called++;
        });

        $botman->listen();

        $this->assertEquals(2, $called);
    }

    /** @test */
    public function it_resets_the_group_matching_with_multiple_commands()
    {
        $called = 0;

        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => ['Foo 1', 'Bar 2'],
        ]);

        $botman->hears(['Foo (\d+)', 'Bar (\d+)'], function ($bot, $number) use (&$called) {
            $called++;

            $this->assertEquals($called, $number);
        });

        $botman->listen();
    }

    /** @test */
    public function it_hears_only_first_matching_command_that_returns()
    {
        $called_once = false;
        $called_twice = false;

        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Foo',
        ]);

        $botman->hears('Foo', function ($bot) use (&$called_once) {
            $called_once = true;

            return true;
        });

        $botman->hears('Foo(.*)', function ($bot) use (&$called_twice) {
            $called_twice = true;
        });

        $botman->listen();
        $this->assertTrue($called_once);
        $this->assertFalse($called_twice);
    }

    /** @test */
    public function it_can_used_instance_commands()
    {
        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Foo',
        ]);

        $command = new TestClass($botman);

        $botman->hears('Foo', [$command, 'foo']);
        $botman->listen();

        $this->assertTrue($command::$called);
    }

    /** @test */
    public function it_does_not_hear_bot_commands()
    {
        $called = false;

        $botman = $this->getBot([
            'event' => [
                'user' => 'U0X12345',
                'text' => 'foo',
                'bot_id' => '123',
            ],
        ]);

        $botman->hears('Foo', function ($bot) use (&$called) {
            $called = true;
        });
        $botman->listen();
        $this->assertFalse($called);
    }

    /** @test */
    public function it_calls_fallback_without_closures()
    {
        $botman = $this->getBot([
            'event' => [
                'user' => 'U0X12345',
                'text' => 'foo',
            ],
        ]);

        $called = false;
        TestFallback::$called = false;

        $botman->fallback(TestFallback::class.'@foo');

        $botman->hears('bar', function ($bot) use (&$called) {
            $called = true;
        });

        $botman->listen();
        $this->assertFalse($called);
        $this->assertTrue(TestFallback::$called);
    }

    /** @test */
    public function it_hears_matching_commands_without_closures()
    {
        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Foo',
        ]);
        TestClass::$called = false;
        $botman->hears('foo', TestClass::class.'@foo');
        $botman->listen();
        $this->assertTrue(TestClass::$called);
    }

    /** @test */
    public function it_hears_matching_commands_with_container()
    {
        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Foo',
        ]);
        TestClass::$called = false;

        /** @var ContainerInterface|m\Mock $containerMock */
        $containerMock = m::mock(ContainerInterface::class);
        $containerMock->shouldReceive('get')
            ->with(TestClass::class)
            ->once()
            ->andReturn(new TestClass($botman));

        $botman->setContainer($containerMock);

        $botman->hears('foo', TestClass::class.'@foo');
        $botman->listen();
        $this->assertTrue(TestClass::$called);
    }

    /** @test */
    public function it_throws_not_found_exception_when_command_is_not_registered_in_container()
    {
        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Foo',
        ]);
        TestClass::$called = false;

        /** @var ContainerInterface|m\Mock $containerMock */
        $containerMock = m::mock(ContainerInterface::class);
        $exceptionMock = new class() extends \Exception implements NotFoundExceptionInterface {
        };
        $containerMock->shouldReceive('get')->once()->andThrow($exceptionMock);

        $botman->setContainer($containerMock);

        $botman->hears('foo', TestClass::class.'@foo');

        $this->expectException(NotFoundExceptionInterface::class);

        $botman->listen();
        $this->assertFalse(TestClass::$called);
    }

    /** @test */
    public function it_uses_invoke_method()
    {
        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Foo',
        ]);
        TestClass::$called = false;
        $botman->hears('foo', TestClass::class);
        $botman->listen();
        $this->assertTrue(TestClass::$called);

        $this->expectException(UnexpectedValueException::class);
        $this->expectExceptionMessage('Invalid hears action: [stdClass]');

        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Foo',
        ]);
        $botman->hears('foo', \stdClass::class);
        $botman->listen();
    }

    /** @test */
    public function it_hears_matching_commands_without_invokable_service()
    {
        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Foo',
        ]);
        $service = new InvokableService();
        $botman->hears('foo', $service);
        $botman->listen();
        $this->assertTrue($service->invoked);
    }

    /** @test */
    public function it_does_not_hears_matching_commands_in_text()
    {
        $called = false;

        $botman = $this->getBot([
            'event' => [
                'user' => 'U0X12345',
                'text' => 'this',
            ],
        ]);

        $botman->hears('hi', function ($bot) use (&$called) {
            $called = true;
        });
        $botman->listen();
        $this->assertFalse($called);
    }

    /** @test */
    public function it_hears_for_specific_drivers_only()
    {
        $called = false;
        DriverManager::loadDriver(TestAdditionalDriver::class);

        $botman = $this->getBot([
            'additional' => true,
            'event' => [
                'user' => 'U0X12345',
                'channel' => 'D12345',
                'text' => 'foo',
            ],
        ]);

        $botman->hears('foo', function ($bot) use (&$called) {
            $called = true;
        })->driver(TestAdditionalDriver::class);
        $botman->listen();
        $this->assertFalse($called);

        $called = false;

        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Foo',
        ]);

        $botman->hears('foo', function ($bot) use (&$called) {
            $called = true;
        })->driver(FakeDriver::class);
        $botman->listen();
        $this->assertTrue($called);

        $called = false;

        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Foo',
        ]);

        $botman->hears('foo', function ($bot) use (&$called) {
            $called = true;
        })->driver([TestAdditionalDriver::class, FakeDriver::class]);
        $botman->listen();
        $this->assertTrue($called);
    }

    /** @test */
    public function it_passes_itself_to_the_closure()
    {
        $called = false;

        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Foo',
        ]);

        $botman->hears('foo', function ($bot) use (&$called) {
            $called = true;
            $this->assertInstanceOf(BotMan::class, $bot);
        });
        $botman->listen();
        $this->assertTrue($called);
    }

    /** @test */
    public function it_can_retrieve_the_user()
    {
        $called = false;

        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Foo',
        ]);

        $botman->hears('foo', function ($bot) use (&$called) {
            $called = true;
            $this->assertSame('UX12345', $bot->getMessage()->getSender());
        });
        $botman->listen();
        $this->assertTrue($called);
    }

    /** @test */
    public function it_allows_regular_expressions()
    {
        $called = false;

        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => 'Hi Julia',
        ]);

        $botman->hears('hi {name}', function ($bot, $name) use (&$called) {
            $called = true;
            $this->assertSame('Julia', $name);
        });
        $botman->listen();
        $this->assertTrue($called);
        $called = false;

        $botman = $this->getBot([
            'sender' => 'UX12345',
            'recipient' => 'general',
            'message' => '/hi Julia',
        ]);

        $botman->hears('/hi {name}', function ($bot, $name) use (&$called) {
            $called = true;
            $this->assertSame('Julia', $name);
        });
