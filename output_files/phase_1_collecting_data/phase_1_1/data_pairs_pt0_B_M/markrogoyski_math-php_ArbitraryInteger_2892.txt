    /**
     * Constructor
     *
     * If the constructor is given an integer, this value is used for the value of the object.
     * If a string is given, it must be in one of the standard PHP integer base formats.
     *
     * @param string|integer $number
     *
     * @throws Exception\BadParameterException
     * @throws Exception\IncorrectTypeException
     */

    public function __construct($number)
    {
        $this->isPositive = true;

        if (\is_int($number)) {
            if ($number < 0) {
                // Since abs(PHP_INT_MIN) is PHP_INT_MAX + 1, we cannot just change the sign.
                // This is more universal then making a single edge case for PHP_INT_MIN
                $positive       = new ArbitraryInteger(-1 * ($number + 1));
                $this->base256  = $positive->add(1)->toBinary();
                $this->isPositive = false;
            } else {
                $int_part = \intdiv($number, 256);
                $string   = \chr($number % 256);
                while ($int_part > 0) {
                    $string   = \chr($int_part % 256) . $string;
                    $int_part = \intdiv($int_part, 256);
                }
                $this->base256 = $string;
            }
        } elseif (\is_string($number)) {
            if ($number == '') {
                throw new Exception\BadParameterException("String cannot be empty.");
            }
            if ($number[0] == '-') {
                $this->isPositive = false;
                $number         = \substr($number, 1);
            }
            $number = strtolower($number);
            $base    = 10;
            if ($number[0] == '0') {
                if ($number == '0') {
                    $base = 10;
                } elseif ($number[1] == 'x') {
                    $base   = 16;
                    $number = \substr($number, 2);
                } elseif ($number[1] == 'b') {
                    $base   = 2;
                    $number = \substr($number, 2);
                } else {
                    $base   = 8;
                    $number = \substr($number, 1);
                }
            }
            $base256       = BaseEncoderDecoder::createArbitraryInteger($number, $base);
            $this->base256 = $base256->toBinary();
        } else {
            // Not an int, and not a string
            throw new Exception\IncorrectTypeException("Number can only be an int or a string: type '" . \gettype($number) . "' provided");
        }
    }
