    /**
     * Calculates alpha that minimizes the function f(θ + α.d)
     * by performing a line search that does not rely upon the derivation.
     *
     * There are several alternatives for this function. For now, we
     * prefer a method inspired from the bisection method for its simplicity.
     * This algorithm attempts to find an optimum alpha value between 0.0001 and 0.01
     *
     * Algorithm as follows:
     *  a) Probe a small alpha  (0.0001) and calculate cost function
     *  b) Probe a larger alpha (0.01) and calculate cost function
     *		b-1) If cost function decreases, continue enlarging alpha
     *		b-2) If cost function increases, take the midpoint and try again
     */

    protected function getAlpha(array $d): float
    {
        $small = MP::muls($d, 0.0001);
        $large = MP::muls($d, 0.01);

        // Obtain θ + α.d for two initial values, x0 and x1
        $x0 = MP::add($this->theta, $small);
        $x1 = MP::add($this->theta, $large);

        $epsilon = 0.0001;
        $iteration = 0;
        do {
            $fx1 = $this->cost($x1);
            $fx0 = $this->cost($x0);

            // If the difference between two values is small enough
            // then break the loop
            if (abs($fx1 - $fx0) <= $epsilon) {
                break;
            }

            if ($fx1 < $fx0) {
                $x0 = $x1;
                $x1 = MP::adds($x1, 0.01); // Enlarge second
            } else {
                $x1 = MP::divs(MP::add($x1, $x0), 2.0);
            } // Get to the midpoint

            $error = $fx1 / $this->dimensions;
        } while ($error <= $epsilon || $iteration++ < 10);

        // Return α = θ / d
        // For accuracy, choose a dimension which maximize |d[i]|
        $imax = 0;
        for ($i = 1; $i <= $this->dimensions; ++$i) {
            if (abs($d[$i]) > abs($d[$imax])) {
                $imax = $i;
            }
        }

        if ($d[$imax] == 0) {
            return $x1[$imax] - $this->theta[$imax];
        }

        return ($x1[$imax] - $this->theta[$imax]) / $d[$imax];
    }
