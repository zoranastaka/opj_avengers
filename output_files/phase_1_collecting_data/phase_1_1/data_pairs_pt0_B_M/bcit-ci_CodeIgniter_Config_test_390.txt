	// --------------------------------------------------------------------

	public function test_base_url()
	{
		// Test regular base URL
		$base_url = $this->cfg['base_url'];
		$this->assertEquals($base_url, $this->config->base_url());

		// Test with URI
		$uri = 'test';
		$this->assertEquals($base_url.$uri, $this->config->base_url($uri));

		// Clear base_url
		$this->ci_set_config('base_url', '');

		// Rerun constructor
		$cls =& $this->ci_core_class('cfg');
		$this->config = new $cls;

		// Test default base
		$this->assertEquals('http://localhost/', $this->config->base_url());

		// Capture server vars
		$old_host = isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : NULL;
		$old_script_name = isset($_SERVER['SCRIPT_NAME']) ? $_SERVER['SCRIPT_NAME'] : NULL;
		$old_script_filename = $_SERVER['SCRIPT_FILENAME'];
		$old_https = isset($_SERVER['HTTPS']) ? $_SERVER['HTTPS'] : NULL;
		$old_server_addr = isset($_SERVER['SERVER_ADDR']) ? $_SERVER['SERVER_ADDR'] : NULL;

		// The 'Host' header is user input and must not be trusted
		$_SERVER['HTTP_HOST'] = 'test.com';
		$this->config = new $cls;
		$this->assertEquals('http://localhost/', $this->config->base_url());

		// However, we may fallback to the server's IP address
		$_SERVER['SERVER_ADDR'] = '127.0.0.1';
		$_SERVER['SCRIPT_NAME'] = '/base_test.php';
		$_SERVER['SCRIPT_FILENAME'] = '/foo/bar/base_test.php';
		$this->config = new $cls;
		$this->assertEquals('http://127.0.0.1/', $this->config->base_url());

		// Making sure that HTTPS and URI path are also detected
		$_SERVER['HTTPS'] = 'on';
		$_SERVER['SCRIPT_NAME'] = '/path/base_test.php';
		$_SERVER['SCRIPT_FILENAME'] = '/foo/bar/path/base_test.php';
		$this->config = new $cls;
		$this->assertEquals('https://127.0.0.1/path/', $this->config->base_url());

		// Restore server vars
		$_SERVER['HTTP_HOST'] = $old_host;
		$_SERVER['SCRIPT_NAME'] = $old_script_name;
		$_SERVER['SCRIPT_FILENAME'] = $old_script_filename;
		$_SERVER['HTTPS'] = $old_https;
		$_SERVER['SERVER_ADDR'] = $old_server_addr;
	}
