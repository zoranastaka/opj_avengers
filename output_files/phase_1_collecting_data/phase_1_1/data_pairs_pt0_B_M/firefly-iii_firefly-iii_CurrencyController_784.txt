/**
 * Class CurrencyController
 */

class CurrencyController extends Controller
{
    private CurrencyRepositoryInterface $repository;

    /**
     * CurrencyController constructor.
     */
    public function __construct()
    {
        parent::__construct();
        $this->middleware(
            function ($request, $next) {
                /** @var User $user */
                $user             = auth()->user();
                $this->repository = app(CurrencyRepositoryInterface::class);
                $this->repository->setUser($user);

                return $next($request);
            }
        );
    }

    /**
     * @param AutocompleteRequest $request
     *
     * @return JsonResponse
     */
    public function currencies(AutocompleteRequest $request): JsonResponse
    {
        $data       = $request->getData();
        $collection = $this->repository->searchCurrency($data['query'], $data['limit']);
        $result     = [];

        /** @var TransactionCurrency $currency */
        foreach ($collection as $currency) {
            $result[] = [
                'id'             => (string)$currency->id,
                'name'           => $currency->name,
                'code'           => $currency->code,
                'symbol'         => $currency->symbol,
                'decimal_places' => $currency->decimal_places,
            ];
        }

        return response()->json($result);
    }

    /**
     * @param AutocompleteRequest $request
     *
     * @return JsonResponse
     */
    public function currenciesWithCode(AutocompleteRequest $request): JsonResponse
    {
        $data       = $request->getData();
        $collection = $this->repository->searchCurrency($data['query'], $data['limit']);
        $result     = [];

        /** @var TransactionCurrency $currency */
        foreach ($collection as $currency) {
            $result[] = [
                'id'             => (string)$currency->id,
                'name'           => sprintf('%s (%s)', $currency->name, $currency->code),
                'code'           => $currency->code,
                'symbol'         => $currency->symbol,
                'decimal_places' => $currency->decimal_places,
            ];
        }

        return response()->json($result);
    }
}
