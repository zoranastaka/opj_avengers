    /**
     * Integer Square Root
     *
     * Calculate the largest integer less than the square root of an integer.
     * https://en.wikipedia.org/wiki/Integer_square_root
     *
     * @return ArbitraryInteger
     *
     * @throws Exception\BadParameterException
     * @throws Exception\IncorrectTypeException
     * @throws Exception\OutOfBoundsException
     */

    public function isqrt(): ArbitraryInteger
    {
        if ($this->lessThan(0)) {
            throw new Exception\OutOfBoundsException('isqrt only works on numbers ≥ 0');
        }

        // √0 = 0 edge case
        if ($this->equals(0)) {
            return new static(0);
        }

        $length = \strlen($this->base256);

        // Start close to the value, at a number around half the digits.
        $X        = self::fromBinary(\substr($this->base256, 0, \intdiv($length, 2) + 1), true);
        $lastX    = $X;
        $converge = false;
        while (!$converge) {
            $NX = $this->intdiv($X);
            $X  = $X->add($NX)->intdiv(2);
            if ($X->equals($lastX) || $X->equals($lastX->add(1))) {
                $converge = true;
            } else {
                $lastX = $X;
            }
        }

        return $lastX;
    }
