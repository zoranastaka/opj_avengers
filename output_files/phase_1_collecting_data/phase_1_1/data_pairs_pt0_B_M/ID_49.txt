    /**
     * Test RFC822 address splitting.
     */

    public function testAddressSplitting()
    {
        //Test built-in address parser
        self::assertCount(
            2,
            PHPMailer::parseAddresses(
                'Joe User <joe@example.com>, Jill User <jill@example.net>'
            ),
            'Failed to recognise address list (IMAP parser)'
        );
        self::assertEquals(
            [
                ['name' => 'Joe User', 'address' => 'joe@example.com'],
                ['name' => 'Jill User', 'address' => 'jill@example.net'],
                ['name' => '', 'address' => 'frank@example.com'],
            ],
            PHPMailer::parseAddresses(
                'Joe User <joe@example.com>,'
                . 'Jill User <jill@example.net>,'
                . 'frank@example.com,'
            ),
            'Parsed addresses'
        );
        //Test simple address parser
        self::assertCount(
            2,
            PHPMailer::parseAddresses(
                'Joe User <joe@example.com>, Jill User <jill@example.net>',
                false
            ),
            'Failed to recognise address list'
        );
        //Test single address
        self::assertNotEmpty(
            PHPMailer::parseAddresses(
                'Joe User <joe@example.com>',
                false
            ),
            'Failed to recognise single address'
        );
        //Test quoted name IMAP
        self::assertNotEmpty(
            PHPMailer::parseAddresses(
                'Tim "The Book" O\'Reilly <foo@example.com>'
            ),
            'Failed to recognise quoted name (IMAP)'
        );
        //Test quoted name
        self::assertNotEmpty(
            PHPMailer::parseAddresses(
                'Tim "The Book" O\'Reilly <foo@example.com>',
                false
            ),
            'Failed to recognise quoted name'
        );
        //Test single address IMAP
        self::assertNotEmpty(
            PHPMailer::parseAddresses(
                'Joe User <joe@example.com>'
            ),
            'Failed to recognise single address (IMAP)'
        );
        //Test unnamed address
        self::assertNotEmpty(
            PHPMailer::parseAddresses(
                'joe@example.com',
                false
            ),
            'Failed to recognise unnamed address'
        );
        //Test unnamed address IMAP
        self::assertNotEmpty(
            PHPMailer::parseAddresses(
                'joe@example.com'
            ),
            'Failed to recognise unnamed address (IMAP)'
        );
        //Test invalid addresses
        self::assertEmpty(
            PHPMailer::parseAddresses(
                'Joe User <joe@example.com.>, Jill User <jill.@example.net>'
            ),
            'Failed to recognise invalid addresses (IMAP)'
        );
        //Test invalid addresses
        self::assertEmpty(
            PHPMailer::parseAddresses(
                'Joe User <joe@example.com.>, Jill User <jill.@example.net>',
                false
            ),
            'Failed to recognise invalid addresses'
        );
    }
