    /**
     * Möbius function
     * The sum of the primitive nᵗʰ roots of unity.
     *
     * Notation
     *    μ(n)  mu(n)
     *
     * Algorithm:
     *    - if n is not squarefree, return 0
     *    - return (-1)ᵏ, where k is the number of primes in n
     *
     * @see    https://en.wikipedia.org/wiki/M%C3%B6bius_function
     * @see    https://oeis.org/A008683
     *
     * @param  int $n
     *
     * @return int 0 if n is not squarefree; 1 if n has an even number of prime factors; -1 if n has an odd number of prime factors
     *
     * @throws Exception\OutOfBoundsException if n is < 1.
     */

    public static function mobius(int $n): int
    {
        $factors = self::primeFactorization($n);
        if ($factors !== \array_unique($factors)) {
            return 0;
        }

        return (-1) ** \count($factors);
    }
