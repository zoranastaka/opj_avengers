    /**
     * @test
     * @dataProvider dataProviderForNaryCartesianProduct
     */

    public function testNaryCartesianProduct(array $A, array $B, array $C, array $A×B×C, Set $R)
    {
        // Given
        $setA        = new Set($A);
        $setB        = new Set($B);
        $setC        = new Set($C);

        // When
        $setA×B×C    = $setA->cartesianProduct($setB, $setC);
        $A×B×C_array = $setA×B×C->asArray();

        // Then
        $this->assertEquals($R, $setA×B×C);
        $this->assertEquals($A×B×C, $A×B×C_array);
        $this->assertEquals(count($setA×B×C), count($A×B×C));
        $this->assertEquals(count($setA×B×C), count($setA) * count($setB) * count($setC));

        foreach ($setA×B×C as $key => $value) {
            $this->assertInstanceOf(Set::class, $value);
            $this->assertEquals(3, count($value));
        }
        foreach ($A×B×C_array as $key => $value) {
            $this->assertInstanceOf(Set::class, $value);
            $this->assertEquals(3, count($value));
        }
    }
