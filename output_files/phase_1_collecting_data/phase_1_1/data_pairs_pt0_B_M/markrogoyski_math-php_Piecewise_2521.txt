    /**
    * Find which subinterval our input value is contained within, and then return
    * the function that corresponds to that subinterval. If no subinterval is found
    * such that our input is contained within it, a false is returned.
    *
    * @param float $x The value at which we are searching for a subinterval that
    *                  contains it, and thus has a corresponding function.
    *
    * @return callable Returns the function that contains $x in its domain
    *
    * @throws Exception\BadDataException if an interval cannot be found which contains our $x
    */

    private function getFunction(float $x): callable
    {
        foreach ($this->intervals as $i => $interval) {
            $a     = $interval[0];
            $b     = $interval[1];
            $aOpen = $interval[2] ?? false;
            $bOpen = $interval[3] ?? false;

            // Four permutations: open-open, open-closed, closed-open, closed-closed
            if ($this->openOpen($aOpen, $bOpen) && $x > $a && $x < $b) {
                return $this->functions[$i];
            }
            if ($this->openClosed($aOpen, $bOpen) && $x > $a && $x <= $b) {
                return $this->functions[$i];
            }
            if ($this->closedOpen($aOpen, $bOpen) && $x >= $a && $x < $b) {
                return $this->functions[$i];
            }
            if ($this->closedClosed($aOpen, $bOpen) && $x >= $a && $x <= $b) {
                return $this->functions[$i];
            }
        }

        throw new Exception\BadDataException("The input {$x} is not in the domain of this piecewise function, thus it is undefined at that point.");
    }
