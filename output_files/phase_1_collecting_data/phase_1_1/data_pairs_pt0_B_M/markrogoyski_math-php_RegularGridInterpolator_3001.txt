    /**
     * @param array $indices
     * @param array $normDistances
     *
     * @return float|int
     */

    private function evaluateLinear(array $indices, array $normDistances)
    {
        $edges = [];
        foreach ($indices as $i) {
            $edges[] = [$i, $i + 1];
        }
        $edges[] = 1; // pass last argument (repeat)
        $edges   = $this->product(...$edges); // create many to many links

        $values = 0;
        foreach ($edges as $edge_indices) {
            $weight = 1;
            foreach (Iter::zip($edge_indices, $indices, $normDistances) as [$ei, $i, $yi]) {
                $weight *= ($ei == $i)
                    ? 1 - $yi
                    : $yi;
            }
            $values += ($this->flatCall($this->values, $edge_indices) * $weight);
        }

        return $values;
    }
