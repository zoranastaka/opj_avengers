    /**
     * Multiply
     * Return the result of multiplying two ArbitraryIntegers, or an ArbitraryInteger and an integer.
     * @todo use Karatsuba algorithm
     *
     * @param int|string|ArbitraryInteger $number
     *
     * @return ArbitraryInteger
     *
     * @throws Exception\BadParameterException
     * @throws Exception\IncorrectTypeException
     */

    public function multiply($number): ArbitraryInteger
    {
        $number_obj  = self::create($number);
        $number  = $number_obj->toBinary();
        $length  = \strlen($number);
        $product = new ArbitraryInteger(0);

        for ($i = 1; $i <= $length; $i++) {
            $this_len      = \strlen($this->base256);
            $base_digit    = \ord(\substr($number, -1 * $i, 1));
            $carry         = 0;
            $inner_product = '';

            for ($j = 1; $j <= $this_len; $j++) {
                $digit         = \ord(\substr($this->base256, -1 * $j, 1));
                $step_product  = $digit * $base_digit + $carry;
                $mod           = $step_product % 256;
                $carry         = \intdiv($step_product, 256);
                $inner_product = \chr($mod) . $inner_product;
            }
            if ($carry > 0) {
                $inner_product = \chr($carry) . $inner_product;
            }

            $inner_product = $inner_product . \str_repeat(\chr(0), $i - 1);
            $inner_obj     = self::fromBinary($inner_product, true);
            $product       = $product->add($inner_obj);
        }

        return ($this->isPositive ^ $number_obj->isPositive()) ? $product->negate() : $product;
    }
