    /**
     * @test The class returns the correct scores
     *
     * R code for expected values:
     *   model$calres$scores
     *   new = matrix(c(1:9), 1, 9)
     *   result = predict(model, new)
     *   result$scores
     *
     * @throws \Exception
     */

    public function testScores()
    {
        // Given
        $expected = [
            [ -79.596905,    2.136219, -2.1820822, -2.57465751, -0.71135479, -0.32047992,  0.157501456,  0.070619060,  0.209703818],
            [ -79.599050,    2.151464, -2.2432114, -2.03069985, -0.88961594, -0.46613109,  0.092652435,  0.086977555,  0.063769043],
            [-133.892150,   -5.056248, -2.1582751,  0.37417681,  1.15846858,  1.05439146,  0.051833068, -0.144327723, -0.121563182],
            [   8.517325,   44.982954,  1.2417493,  0.72954922,  0.42700378, -0.09005525, -0.022872949, -0.220050034,  0.224865203],
            [ 128.685064,   30.817359,  3.3473414, -0.53539129,  0.71430291, -0.30387460, -0.135679710,  0.058643754,  0.218925213],
            [ -23.219555,   35.103458, -3.2505355,  1.34779162,  0.82121536, -0.16633269, -0.226610224, -0.425190005,  0.086304304],
            [ 159.307948,  -32.260279,  0.6655009,  0.14246662,  0.77193661,  0.10914095,  0.475154467,  0.058203700,  0.376032478],
            [-112.615721,   39.698710, -0.4451302,  0.27197501, -1.25942420,  0.38172207,  0.038690309, -0.309295378, -0.099231680],
            [-103.534441,    7.509047, -1.5566816,  4.01931038, -1.11803119,  0.07824334, -0.573485531,  0.245455187,  0.243951944],
            [ -67.046515,   -6.212642, -3.5834890, -0.44585152, -0.98980621, -0.47509527, -0.098816525,  0.191515011, -0.196631818],
            [ -66.997152,   -6.210497, -5.0029140,  0.04330535, -0.98285067, -0.41031203, -0.279800775,  0.285766884, -0.063842280],
            [  55.209997,  -10.374782, -1.6048702,  0.13703937,  0.81484237, -1.04583765,  0.090221923, -0.086064946, -0.481567193],
            [  55.172235,  -10.363165, -0.7048221,  0.31055628,  0.77199275, -1.16325126,  0.003552401, -0.030431215, -0.169132476],
            [  55.249927,  -10.372209, -2.8029489,  0.59566906,  0.87381987, -0.97107617, -0.148149434,  0.050978054, -0.091572404],
            [ 242.814250,   52.502787, -0.9935675,  0.19644174, -1.52638334,  0.67181962,  0.036476815, -0.096261377,  0.175925908],
            [ 236.369213,   38.281506, -1.1149827,  0.48258451, -1.25163156,  0.62742287,  0.145831874, -0.083427275, -0.126121465],
            [ 224.737216,   16.112173,  2.9152331,  0.89940350, -1.12185041,  0.07881235,  0.422172118, -0.007427785, -0.457973891],
            [-172.361930,    6.576858,  5.6422180,  0.71957237, -0.06227959, -0.58775620,  0.136140492, -0.056409984, -0.308820587],
            [-181.065241,   17.785137,  3.2721557, -1.10287537, -0.71194970, -0.16125592,  0.229364731,  0.779629259,  0.277650532],
            [-179.696168,    4.189461,  6.8611114,  1.11911054, -0.15786301, -0.85264781,  0.015899511,  0.140370594, -0.027409151],
            [-121.224045,   -3.349732, -3.1225193,  1.83337308,  1.18651284,  0.63485748,  0.581440409,  0.073623072,  0.261361819],
            [  80.157831,   34.982959, -1.7590943, -1.43556764,  1.10251051, -0.30007010, -0.211611180, -0.288736259,  0.103610356],
            [  67.570808,   28.893619, -2.4991510, -1.01885876,  1.15876684, -0.34659009, -0.333905063,  0.134700857,  0.093694327],
            [ 150.353506,  -36.634796, -0.6025347, -0.23292505,  0.92621743,  0.34551137,  0.585172071,  0.475418340, -0.065661454],
            [ 164.651439,   48.240384,  5.0492661, -0.63275394,  0.15006100, -0.15066251, -0.071387544, -0.056589142,  0.106683147],
            [-171.895505,    6.645077,  0.6976215, -0.04470866,  0.59553532,  0.24225372,  0.016218017,  0.044922380, -0.003086897],
            [-123.805717,    2.037081,  1.4402425, -1.82648643, -0.07720272,  1.35053737, -0.187910222, -0.038600593, -0.262855744],
            [-137.080850,  -28.674781,  5.5533075, -0.60875625,  0.34063654,  0.49808620, -0.107164437, -0.654157034,  0.103563782],
            [ 159.414119,  -53.314034,  2.6072858, -0.67444128,  0.74059103,  1.13780719, -0.933670505,  0.492992984, -0.155938789],
            [ -64.762763,  -62.951467, -2.3926876, -1.77763922, -1.14846303, -0.21602357,  0.005250095, -0.510938030,  0.104971353],
            [ 145.362559, -139.046568,  1.5808340,  1.14005113, -0.95743816, -0.28877314, -0.030264214, -0.240059511,  0.219215280],
            [-115.179728,  -13.825052, -2.8543702,  0.57923616,  0.41173077,  1.10561930,  0.277756120,  0.058149599, -0.238819498],
        ];

        // And since each column could be multiplied by -1, we will compare the two and adjust.
        $scores = self::$pca->getScores();
        $score_array = $scores->getMatrix();

        // Get an array that's roughly ones and negative ones.
        $quotiant = Multi::divide($expected[1], $score_array[1]);

        // Convert to exactly one or negative one. Cannot be zero.
        $signum = \array_map(
            function ($x) {
                return $x <=> 0;
            },
            $quotiant
        );
        $signature = MatrixFactory::diagonal($signum);

        // Multiplying a sign change matrix on the right changes column signs.
        $sign_adjusted = $scores->multiply($signature);

        // Then
        $this->assertEqualsWithDelta($expected, $sign_adjusted->getMatrix(), .00001);

        // And Given
        $expected = MatrixFactory::create([[-266.1034, 28.53006, -29.10035, -15.48234, -4.270139, 6.143432, 1.080559, -1.65688, -3.441352]]);
        $sign_adjusted = $expected->multiply($signature);

        // When
        $scores = self::$pca->getScores(MatrixFactory::create([[1,2,3,4,5,6,7,8,9]]));

        // Then
        $this->assertEqualsWithDelta($sign_adjusted->getMatrix(), $scores->getMatrix(), .00001);
    }
