    /**
     * @test         Piecewise __invoke evaluates the expected function to get the expected result
     * @dataProvider dataProviderForEval
     * @param        array $intervals
     * @param        array $polynomial_args
     * @param        array $inputs
     * @param        array $expected
     */

    public function testEval(array $intervals, array $polynomial_args, array $inputs, array $expected)
    {
        // Precondition
        if (count($inputs) !== count($expected)) {
            $this->fail('Number of inputs and expected outputs must match');
        }

        // Given
        $functions = \array_map(
            function ($args) {
                return new Polynomial($args);
            },
            $polynomial_args
        );
        $piecewise = new Piecewise($intervals, $functions);

        $n = count($inputs);
        for ($i = 0; $i < $n; $i++) {
            // When
            $evaluated = $piecewise($inputs[$i]);

            // Then
            $this->assertEquals($expected[$i], $evaluated);
        }
    }
