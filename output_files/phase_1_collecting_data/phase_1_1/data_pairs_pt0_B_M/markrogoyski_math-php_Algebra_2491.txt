    /**
     * Get factors of an integer
     * The decomposition of a composite number into a product of smaller integers.
     * https://en.wikipedia.org/wiki/Integer_factorization
     *
     * Algorithm:
     * - special case: if x is 0, return [\INF]
     * - let x be |x|
     * - push on 1 as a factor
     * - prime factorize x
     * - build sets of prime powers from primes
     * - push on the product of each set
     *
     * @param  int $x
     * @return array of factors
     *
     * @throws Exception\OutOfBoundsException if n is < 1
     */

    public static function factors(int $x): array
    {
        // 0 has infinite factors
        if ($x === 0) {
            return [\INF];
        }

        $x       = \abs($x);
        $factors = [1];

        // Prime factorize x
        $primes = Integer::primeFactorization($x);

        // Prime powers from primes
        $sets       = [];
        $current    = [];
        $map        = [];
        $exponents  = \array_count_values($primes);
        $limit      = 1;
        $count      = 0;

        foreach ($exponents as $prime => $exponent) {
            $map[]        = $prime;
            $sets[$prime] = [1, $prime];
            $primePower   = $prime;

            for ($n = 2; $n <= $exponent; ++$n) {
                $primePower *= $prime;
                $sets[$prime][$n] = $primePower;
            }

            $limit *= \count($sets[$prime]);
            if ($count === 0) { // Skip 1 on the first prime
                $current[] = \next($sets[$prime]);
            } else {
                $current[] = 1;
            }
            ++$count;
        }

        // Multiply distinct prime powers together
        for ($i = 1; $i < $limit; ++$i) {
            $factors[] = \array_product($current);
            for ($i2 = 0; $i2 < $count; ++$i2) {
                $current[$i2] = \next($sets[$map[$i2]]);
                if ($current[$i2] !== false) {
                    break;
                }
                $current[$i2] = \reset($sets[$map[$i2]]);
            }
        }

        \sort($factors);
        return $factors;
    }
