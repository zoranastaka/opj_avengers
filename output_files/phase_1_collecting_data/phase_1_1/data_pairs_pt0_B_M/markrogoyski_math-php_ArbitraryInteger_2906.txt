    /**
     * Addition
     *
     * @param int|string|ArbitraryInteger $number
     *
     * @return ArbitraryInteger
     *
     * @throws Exception\BadParameterException
     * @throws Exception\IncorrectTypeException
     */

    public function add($number): ArbitraryInteger
    {
        $number = self::create($number);
        if (!$number->isPositive()) {
            return $this->subtract($number->negate());
        }
        if (!$this->isPositive) {
            return $number->subtract($this->negate());
        }

        $number   = $number->toBinary();
        $carry    = 0;
        $len      = \strlen($this->base256);
        $num_len  = \strlen($number);
        $max_len  = \max($len, $num_len);
        $base_256 = \str_pad($this->base256, $max_len, \chr(0), STR_PAD_LEFT);
        $number   = \str_pad($number, $max_len, \chr(0), STR_PAD_LEFT);
        $result   = '';

        for ($i = 0; $i < $max_len; $i++) {
            $base_chr = \ord($base_256[$max_len - $i - 1]);
            $num_chr  = \ord($number[$max_len - $i - 1]);
            $sum      = $base_chr + $num_chr + $carry;
            $carry    = \intdiv($sum, 256);
            $result   = \chr($sum % 256) . $result;
        }
        if ($carry > 0) {
            $result = \chr($carry) . $result;
        }

        return self::fromBinary($result, true);
    }
