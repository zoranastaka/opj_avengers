    /**
     * 替换段落的回调函数
     * 
     * @access public
     * @param array $matches 匹配值
     * @return string
     */

    public function replaceBlockCallback($matches)
    {
        $tagMatch = '|' . $matches[1] . '|';
        $text = $matches[4];
    
        switch (true) {
            /** 用br处理换行 */
            case false !== strpos('|li|dd|dt|td|p|a|span|cite|strong|sup|sub|small|del|u|i|b|ins|h1|h2|h3|h4|h5|h6|', $tagMatch):
                $text = nl2br(trim($text));
                break;
            /** 用段落处理换行 */
            case false !== strpos('|div|blockquote|form|', $tagMatch):
                $text = $this->cutByBlock($text);
                if (false !== strpos($text, '</p><p>')) {
                    $text = $this->fixPragraph($text);
                }
                break;
            default:
                break;
        }
        
        /** 没有段落能力的标签 */
        if (false !== strpos('|a|span|font|code|cite|strong|sup|sub|small|del|u|i|b|', $tagMatch)) {
            $key = '<b' . $matches[2] . '/>';
        } else {
            $key = '<p' . $matches[2] . '/>';
        }
        
        $this->_blocks[$key] = "<{$matches[1]}{$matches[3]}>{$text}</{$matches[1]}>";
        return $key;
    }
