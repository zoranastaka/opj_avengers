/**
 * @param string $label
 * @return Iterator<int, Issue>
 */

function getIssues(string $label): Iterator
{
	/** @var Client */
	global $client;

	$page = 1;

	/** @var \Github\Api\Issue $api */
	$api = $client->api('issue');
	while (true) {
		$newIssues = $api->all('phpstan', 'phpstan', [
			'state' => 'open',
			'labels' => $label,
			'page' => $page,
			'per_page' => 100,
			'sort' => 'created',
			'direction' => 'desc',
		]);
		if (count($newIssues) === 0) {
			break;
		}

		yield from array_map(function (array $issue): Issue {
			return new Issue(
				$issue['number'],
				$issue['user']['login'],
				$issue['body'],
				DateTimeImmutable::createFromFormat(DateTimeImmutable::ATOM, $issue['updated_at']), // @phpstan-ignore-line
				getComments($issue['number']),
				searchBody($issue['body'], $issue['user']['login'])
			);
		}, $newIssues);
		$page++;
	}
}
