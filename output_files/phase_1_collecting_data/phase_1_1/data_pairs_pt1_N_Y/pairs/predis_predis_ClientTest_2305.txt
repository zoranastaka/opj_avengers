    /**
     * @group disconnected
     */

    public function testPubSubLoopWithCallableReturningFalseStopsPubSubConsumer(): void
    {
        $connection = $this->getMockBuilder('Predis\Connection\NodeConnectionInterface')->getMock();
        $connection
            ->expects($this->exactly(2))
            ->method('read')
            ->willReturnOnConsecutiveCalls(
                array('subscribe', 'channel', 1),
                array('unsubscribe', 'channel', 0)
            );
        $connection
            ->expects($this->exactly(2))
            ->method('writeRequest')
            ->withConsecutive(
                array($this->isRedisCommand('SUBSCRIBE')),
                array($this->isRedisCommand('UNSUBSCRIBE'))
            );

        $callable = $this->getMockBuilder('stdClass')
            ->addMethods(array('__invoke'))
            ->getMock();
        $callable
            ->expects($this->exactly(2))
            ->method('__invoke')
            ->withConsecutive(
                array(
                    $this->isInstanceOf('Predis\PubSub\Consumer'),
                    (object) array('kind' => 'subscribe', 'channel' => 'channel', 'payload' => 1)
                ),
                array(
                    $this->isInstanceOf('Predis\PubSub\Consumer'),
                    (object) array('kind' => 'unsubscribe', 'channel' => 'channel', 'payload' => 0)
                )
            )
            ->willReturnOnConsecutiveCalls(
                false,
                null // <-- this value would be ignored as it is the callback to UNSUBSCRIBE
            );

        $client = new Client($connection);

        $this->assertNull($client->pubSubLoop(array('subscribe' => 'channel'), $callable));
    }
