/**
 * Hack to mock public static methods and properties.
 *
 * How to use:
 *
 * 1. Invoke 'StaticMockerHack::initialize' once, passing an array with the names of the classes
 * that can be mocked.
 *
 * 2. Invoke 'CodeHacker::add_hack(StaticMockerHack::get_hack_instance())' once.
 *
 * 3. Use 'add_method_mocks' in tests as needed to register callbacks to be executed instead of the functions, e.g.:
 *
 * StaticMockerHack::add_method_mocks(
 * [
 *     'SomeClass' => [
 *         'some_method' => function($some_arg) {
 *              return 'foo' === $some_arg ? 'bar' : SomeClass::some_method($some_arg);
 *         }
 *     ]
 * ]);
 *
 * 1 and 2 must be done during the unit testing bootstrap process.
 *
 * Note that unless the tests directory is included in the hacking via 'CodeHacker::initialize'
 * (and they shouldn't!), test code files aren't hacked, therefore the original functions are always
 * executed inside tests (and thus the above example won't stack-overflow).
 */

final class StaticMockerHack extends CodeHack {
