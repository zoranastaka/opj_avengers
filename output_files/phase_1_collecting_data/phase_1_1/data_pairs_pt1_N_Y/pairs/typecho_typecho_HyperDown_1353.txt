    /**
     * @param $block
     * @param $key
     * @param $line
     * @param $state
     * @return bool
     */

    private function parseBlockCode($block, $key, $line, &$state)
    {
        if (preg_match("/^(\s*)(~{3,}|`{3,})([^`~]*)$/i", $line, $matches)) {
            if ($this->isBlock('code')) {
                if ($state['code'] != $matches[2]) {
                    $this->setBlock($key);
                    return false;
                }

                $isAfterList = $block[3][2];

                if ($isAfterList) {
                    $this->combineBlock()
                        ->setBlock($key);
                } else {
                    $this->setBlock($key)
                        ->endBlock();
                }
            } else {
                $isAfterList = false;

                if ($this->isBlock('list')) {
                    $space = $block[3][0];

                    $isAfterList = strlen($matches[1]) >= $space + $state['empty'];
                }

                $state['code'] = $matches[2];

                $this->startBlock('code', $key, array(
                    $matches[1],  $matches[3],  $isAfterList
                ));
            }

            return false;
        } elseif ($this->isBlock('code')) {
            $this->setBlock($key);
            return false;
        }
