    // TODO: Re-add testUnsupportedMethodWithRoute

    public function testContainerSetToRoute()
    {
        $streamProphecy = $this->prophesize(StreamInterface::class);
        $streamProphecy->__toString()->willReturn('Hello World');

        $responseProphecy = $this->prophesize(ResponseInterface::class);
        $responseProphecy->getBody()->willReturn($streamProphecy->reveal());

        $responseFactoryProphecy = $this->prophesize(ResponseFactoryInterface::class);
        $responseFactoryProphecy->createResponse()->willReturn($responseProphecy->reveal());

        $containerProphecy = $this->prophesize(ContainerInterface::class);
        $containerProphecy->has('handler')->willReturn(true);
        $containerProphecy->get('handler')->willReturn(function () use ($responseProphecy) {
            return $responseProphecy->reveal();
        });

        $app = new App($responseFactoryProphecy->reveal(), $containerProphecy->reveal());
        $routeCollector = $app->getRouteCollector();
        $routeCollector->map(['GET'], '/', 'handler');

        $uriProphecy = $this->prophesize(UriInterface::class);
        $uriProphecy->getPath()->willReturn('/');

        $requestProphecy = $this->prophesize(ServerRequestInterface::class);
        $requestProphecy->getMethod()->willReturn('GET');
        $requestProphecy->getUri()->willReturn($uriProphecy->reveal());
        $requestProphecy->getAttribute(RouteContext::ROUTING_RESULTS)->willReturn(null);
        $requestProphecy->withAttribute(Argument::type('string'), Argument::any())->will(function ($args) {
            $this->getAttribute($args[0])->willReturn($args[1]);
            return $this;
        });

        $response = $app->handle($requestProphecy->reveal());

        $this->assertEquals('Hello World', (string) $response->getBody());
    }
