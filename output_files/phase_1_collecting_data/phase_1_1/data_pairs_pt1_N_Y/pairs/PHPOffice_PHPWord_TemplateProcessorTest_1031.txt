    /**
     * @covers ::setValue
     * @covers ::cloneRow
     * @covers ::saveAs
     * @test
     */

    public function testCloneRowAndSetValues()
    {
        $mainPart = '<w:tbl>
            <w:tr>
                <w:tc>
                    <w:tcPr>
                        <w:vMerge w:val="restart"/>
                    </w:tcPr>
                    <w:p>
                        <w:r>
                            <w:t>${userId}</w:t>
                        </w:r>
                    </w:p>
                </w:tc>
                <w:tc>
                    <w:p>
                        <w:r>
                            <w:t>${userName}</w:t>
                        </w:r>
                    </w:p>
                </w:tc>
            </w:tr>
            <w:tr>
                <w:tc>
                    <w:tcPr>
                        <w:vMerge/>
                    </w:tcPr>
                    <w:p/>
                </w:tc>
                <w:tc>
                    <w:p>
                        <w:r>
                            <w:t>${userLocation}</w:t>
                        </w:r>
                    </w:p>
                </w:tc>
            </w:tr>
        </w:tbl>';
        $templateProcessor = new TestableTemplateProcesor($mainPart);

        $this->assertEquals(
            array('userId', 'userName', 'userLocation'),
            $templateProcessor->getVariables()
        );

        $values = array(
            array('userId' => 1, 'userName' => 'Batman', 'userLocation' => 'Gotham City'),
            array('userId' => 2, 'userName' => 'Superman', 'userLocation' => 'Metropolis'),
        );
        $templateProcessor->setValue('tableHeader', 'My clonable table');
        $templateProcessor->cloneRowAndSetValues('userId', $values);
        $this->assertContains('<w:t>Superman</w:t>', $templateProcessor->getMainPart());
        $this->assertContains('<w:t>Metropolis</w:t>', $templateProcessor->getMainPart());
    }
