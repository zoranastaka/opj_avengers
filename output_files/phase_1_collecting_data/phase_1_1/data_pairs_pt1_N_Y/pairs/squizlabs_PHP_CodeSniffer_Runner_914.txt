    /**
     * Waits for child processes to complete and cleans up after them.
     *
     * The reporting information returned by each child process is merged
     * into the main reporter class.
     *
     * @param array $childProcs An array of child processes to wait for.
     *
     * @return bool
     */

    private function processChildProcs($childProcs)
    {
        $numProcessed = 0;
        $totalBatches = count($childProcs);

        $success = true;

        while (count($childProcs) > 0) {
            foreach ($childProcs as $key => $procData) {
                $res = pcntl_waitpid($procData['pid'], $status, WNOHANG);
                if ($res === $procData['pid']) {
                    if (file_exists($procData['out']) === true) {
                        include $procData['out'];

                        unlink($procData['out']);
                        unset($childProcs[$key]);

                        $numProcessed++;

                        if (isset($childOutput) === false) {
                            // The child process died, so the run has failed.
                            $file = new DummyFile(null, $this->ruleset, $this->config);
                            $file->setErrorCounts(1, 0, 0, 0);
                            $this->printProgress($file, $totalBatches, $numProcessed);
                            $success = false;
                            continue;
                        }

                        $this->reporter->totalFiles    += $childOutput['totalFiles'];
                        $this->reporter->totalErrors   += $childOutput['totalErrors'];
                        $this->reporter->totalWarnings += $childOutput['totalWarnings'];
                        $this->reporter->totalFixable  += $childOutput['totalFixable'];
                        $this->reporter->totalFixed    += $childOutput['totalFixed'];

                        if (isset($debugOutput) === true) {
                            echo $debugOutput;
                        }

                        if (isset($childCache) === true) {
                            foreach ($childCache as $path => $cache) {
                                Cache::set($path, $cache);
                            }
                        }

                        // Fake a processed file so we can print progress output for the batch.
                        $file = new DummyFile(null, $this->ruleset, $this->config);
                        $file->setErrorCounts(
                            $childOutput['totalErrors'],
                            $childOutput['totalWarnings'],
                            $childOutput['totalFixable'],
                            $childOutput['totalFixed']
                        );
                        $this->printProgress($file, $totalBatches, $numProcessed);
                    }//end if
                }//end if
            }//end foreach
        }//end while

        return $success;

    }//end processChildProcs()
