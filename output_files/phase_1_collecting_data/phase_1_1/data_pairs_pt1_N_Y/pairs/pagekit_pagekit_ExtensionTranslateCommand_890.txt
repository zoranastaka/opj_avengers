    /**
     * {@inheritdoc}
     */

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $extension = $this->argument('extension') ?: 'system';
        $files     = $this->getFiles($path = $this->getPath($extension), $extension);
        $languages = "$path/languages";

        $app = $this->container;
        $this->visitor = new PhpNodeVisitor($app['view']->getEngine());

        $this->line("Extracting strings for extension '$extension'");

        chdir($this->container->path());

        if (!is_dir($languages)) {
            mkdir($languages, 0755, true);
        }

        $result = [];

        $this->line("Traversing extension files.");

        $progress = new ProgressBar($this->output, count($files));
        $progress->start();

        foreach ($files as $file) {
            $strings = $this->extractStrings($file);
            foreach ($strings as $domain => $messages) {
                if(array_key_exists($domain, $result)) {

                    // custom merge (array_merge would create duplicates from numeric keys)
                    foreach ($messages as $key => $value) {
                        $result[$domain][$key] = $key;
                    }
                    // $result[$domain] = array_merge($result[$domain], $messages);

                } else {
                    $result[$domain] = $messages;
                }
            }
            $progress->advance();
        }

        $progress->finish();
        $this->line("\n");

        // remove strings already present in system "messages"
        if ($extension != 'system') {

            $messages = require($this->getPath('system').'/languages/en_US/messages.php');

            foreach ($result as $domain => $strings) {

                if ('messages' != $domain) {
                    continue;
                }

                foreach (array_keys($result) as $string) {
                    if (isset($messages[$string])) {
                        unset($result[$domain][$string]);
                    }
                }
            }
        }

        $this->writeTranslationFile($result, $extension, $languages);
    }
