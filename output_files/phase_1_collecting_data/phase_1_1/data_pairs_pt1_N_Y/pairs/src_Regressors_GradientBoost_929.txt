    /**
     * Train the estimator with a dataset.
     *
     * @param \Rubix\ML\Datasets\Labeled $dataset
     */

    public function train(Dataset $dataset) : void
    {
        SpecificationChain::with([
            new DatasetIsLabeled($dataset),
            new DatasetIsNotEmpty($dataset),
            new SamplesAreCompatibleWithEstimator($dataset, $this),
            new LabelsAreCompatibleWithLearner($dataset, $this),
        ])->check();

        if ($this->logger) {
            $this->logger->info("$this initialized");
        }

        $this->featureCount = $dataset->numFeatures();

        [$testing, $training] = $dataset->randomize()->split($this->holdOut);

        [$min, $max] = $this->metric->range()->list();

        if ($this->logger) {
            $this->logger->info("Training {$this->base}");
        }

        $this->base->train($training);

        $this->ensemble = $this->scores = $this->losses = [];

        /** @var list<int|float> $predictions */
        $predictions = $this->base->predict($training);

        $out = $prevOut = Vector::quick($predictions);
        $target = Vector::quick($training->labels());

        if (!$testing->empty()) {
            /** @var list<int|float> $predictions */
            $predictions = $this->base->predict($testing);

            $prevPred = Vector::quick($predictions);
        }

        $p = max(self::MIN_SUBSAMPLE, (int) round($this->ratio * $training->numSamples()));

        $bestScore = $min;
        $bestEpoch = $delta = 0;
        $score = null;
        $prevLoss = INF;

        for ($epoch = 1; $epoch <= $this->estimators; ++$epoch) {
            $gradient = $target->subtract($out);

            $training = Labeled::quick($training->samples(), $gradient->asArray());

            $booster = clone $this->booster;

            $subset = $training->randomSubset($p);

            $booster->train($subset);

            $this->ensemble[] = $booster;

            /** @var list<int|float> $predictions */
            $predictions = $booster->predict($training);

            $out = Vector::quick($predictions)
                ->multiply($this->rate)
                ->add($prevOut);

            $loss = $gradient->square()->mean();

            if (is_nan($loss)) {
                if ($this->logger) {
                    $this->logger->info('Numerical instability detected');
                }

                break;
            }

            $this->losses[$epoch] = $loss;

            if (isset($prevPred)) {
                /** @var list<int|float> $predictions */
                $predictions = $booster->predict($testing);

                $pred = Vector::quick($predictions)
                    ->multiply($this->rate)
                    ->add($prevPred);

                $score = $this->metric->score($pred->asArray(), $testing->labels());

                $this->scores[$epoch] = $score;
            }

            if ($this->logger) {
                $this->logger->info("Epoch $epoch - {$this->metric}: "
                    . ($score ?? 'n/a') . ", L2 Loss: $loss");
            }

            if (isset($pred)) {
                if ($score >= $max) {
                    break;
                }

                if ($score > $bestScore) {
                    $bestScore = $score;
                    $bestEpoch = $epoch;

                    $delta = 0;
                } else {
                    ++$delta;
                }

                if ($delta >= $this->window) {
                    break;
                }

                $prevPred = $pred;
            }

            if ($loss <= 0.0) {
                break;
            }

            if (abs($prevLoss - $loss) < $this->minChange) {
                break;
            }

            $prevOut = $out;
            $prevLoss = $loss;
        }

        if ($this->scores and end($this->scores) < $bestScore) {
            if ($this->logger) {
                $this->logger->info("Restoring ensemble state to epoch $bestEpoch");
            }

            $this->ensemble = array_slice($this->ensemble, 0, $bestEpoch);
        }

        if ($this->logger) {
            $this->logger->info('Training complete');
        }
    }
