    /********************************************************************************
     * Middleware
     *******************************************************************************/

    public function testAddMiddleware()
    {
        $streamProphecy = $this->prophesize(StreamInterface::class);
        $streamProphecy->__toString()->willReturn('Hello World');

        $responseProphecy = $this->prophesize(ResponseInterface::class);
        $responseProphecy->getBody()->willReturn($streamProphecy->reveal());

        $responseFactoryProphecy = $this->prophesize(ResponseFactoryInterface::class);
        $responseFactoryProphecy->createResponse()->willReturn($responseProphecy->reveal());

        $app = new App($responseFactoryProphecy->reveal());

        $middlewareProphecy = $this->prophesize(MiddlewareInterface::class);
        $middlewareProphecy->process(Argument::cetera())->will(function () use ($responseProphecy) {
            return $responseProphecy->reveal();
        });

        $middlewareProphecy2 = $this->prophesize(MiddlewareInterface::class);
        $middlewareProphecy2->process(
            Argument::type(ServerRequestInterface::class),
            Argument::type(RequestHandlerInterface::class)
        )->will(function ($args) {
            /** @var ServerRequestInterface $request */
            $request = $args[0];

            /** @var RequestHandlerInterface $handler */
            $handler = $args[1];

            return $handler->handle($request);
        });

        $app->add($middlewareProphecy->reveal());
        $app->addMiddleware($middlewareProphecy2->reveal());
        $app->get('/', function (ServerRequestInterface $request, $response) {
            return $response;
        });

        $uriProphecy = $this->prophesize(UriInterface::class);
        $uriProphecy->getPath()->willReturn('/');

        $requestProphecy = $this->prophesize(ServerRequestInterface::class);
        $requestProphecy->getMethod()->willReturn('GET');
        $requestProphecy->getUri()->willReturn($uriProphecy->reveal());
        $requestProphecy->getAttribute(RouteContext::ROUTING_RESULTS)->willReturn(null);
        $requestProphecy->withAttribute(Argument::type('string'), Argument::any())->will(function ($args) {
            $this->getAttribute($args[0])->willReturn($args[1]);
            return $this;
        });


        $response = $app->handle($requestProphecy->reveal());
        $middlewareProphecy->process(
            Argument::type(ServerRequestInterface::class),
            Argument::type(RequestHandlerInterface::class)
        )->shouldHaveBeenCalled();
        $middlewareProphecy2->process(
            Argument::type(ServerRequestInterface::class),
            Argument::type(RequestHandlerInterface::class)
        )->shouldHaveBeenCalled();

        $this->assertSame($responseProphecy->reveal(), $response);
    }
