    /**
     * @param ServerRequestInterface $request
     * @param ResponseInterface $response
     * @param string $timeLocal
     * @param string $remoteIp
     */

    protected function logResponse(ServerRequestInterface $request, ResponseInterface $response, $timeLocal, $remoteIp)
    {
        $logFunction = function ($size) use ($request, $response, $timeLocal, $remoteIp) {
            $requestString = $request->getMethod() . ' ' . $request->getUri()->getPath() . ' HTTP/' . $request->getProtocolVersion();
            $statusCode = $response->getStatusCode();

            if ($statusCode < 400) {
                $requestString = "<info>$requestString</info>";
                $statusCode = "<info>$statusCode</info>";
            }

            $message = \str_replace(
                [
                    '$remote_addr',
                    '$remote_user',
                    '$time_local',
                    '$request',
                    '$status',
                    '$bytes_sent',
                    '$http_referer',
                    '$http_user_agent',
                ],
                [
                    $remoteIp,
                    '-', //todo remote_user
                    $timeLocal,
                    $requestString,
                    $statusCode,
                    $size,
                    $request->hasHeader('Referer') ? $request->getHeaderLine('Referer') : '-',
                    $request->hasHeader('User-Agent') ? $request->getHeaderLine('User-Agent') : '-'
                ],
                $this->logFormat
            );

            if ($response->getStatusCode() >= 400) {
                $message = "<error>$message</error>";
            }

            $this->sendMessage($this->controller, 'log', ['message' => $message]);
        };

        if ($response->getBody() instanceof EventEmitterInterface) {
            /** @var EventEmitterInterface $body */
            $body = $response->getBody();
            $size = \strlen(\RingCentral\Psr7\str($response));
            $body->on('data', function ($data) use (&$size) {
                $size += \strlen($data);
            });
            //using `close` event since `end` is not fired for files
            $body->on('close', function () use (&$size, $logFunction) {
                $logFunction($size);
            });
        } else {
            $logFunction(\strlen(\RingCentral\Psr7\str($response)));
        }
    }
