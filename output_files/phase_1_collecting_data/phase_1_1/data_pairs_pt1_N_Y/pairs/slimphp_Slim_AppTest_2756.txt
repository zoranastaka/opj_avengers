    /**
     * @dataProvider routeGroupsDataProvider
     * @param array  $sequence
     * @param string $expectedPath
     */

    public function testRouteGroupCombinations(array $sequence, string $expectedPath)
    {
        $responseFactoryProphecy = $this->prophesize(ResponseFactoryInterface::class);
        $app = new App($responseFactoryProphecy->reveal());

        $processSequence = function (RouteCollectorProxy $app, array $sequence, $processSequence) {
            $path = array_shift($sequence);

            /**
             * If sequence isn't on last element we use $app->group()
             * The very tail of the sequence uses the $app->get() method
             */
            if (count($sequence)) {
                $app->group($path, function (RouteCollectorProxy $group) use (&$sequence, $processSequence) {
                    $processSequence($group, $sequence, $processSequence);
                });
            } else {
                $app->get($path, function () {
                });
            }
        };

        $processSequence($app, $sequence, $processSequence);

        $routeCollector = $app->getRouteCollector();
        $route = $routeCollector->lookupRoute('route0');

        $this->assertEquals($expectedPath, $route->getPattern());
    }
