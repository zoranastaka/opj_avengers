    /**
     * Miscellaneous calls to improve test coverage and some small tests.
     */

    public function testMiscellaneous()
    {
        self::assertEquals('application/pdf', PHPMailer::_mime_types('pdf'), 'MIME TYPE lookup failed');
        $this->Mail->clearAttachments();
        $this->Mail->isHTML(false);
        $this->Mail->isSMTP();
        $this->Mail->isMail();
        $this->Mail->isSendmail();
        $this->Mail->isQmail();
        $this->Mail->setLanguage('fr');
        $this->Mail->Sender = '';
        $this->Mail->createHeader();
        self::assertFalse($this->Mail->set('x', 'y'), 'Invalid property set succeeded');
        self::assertTrue($this->Mail->set('Timeout', 11), 'Valid property set failed');
        self::assertTrue($this->Mail->set('AllowEmpty', null), 'Null property set failed');
        self::assertTrue($this->Mail->set('AllowEmpty', false), 'Valid property set of null property failed');
        //Test pathinfo
        $a = '/mnt/files/飛兒樂 團光茫.mp3';
        $q = PHPMailer::mb_pathinfo($a);
        self::assertEquals($q['dirname'], '/mnt/files', 'UNIX dirname not matched');
        self::assertEquals($q['basename'], '飛兒樂 團光茫.mp3', 'UNIX basename not matched');
        self::assertEquals($q['extension'], 'mp3', 'UNIX extension not matched');
        self::assertEquals($q['filename'], '飛兒樂 團光茫', 'UNIX filename not matched');
        self::assertEquals(
            PHPMailer::mb_pathinfo($a, PATHINFO_DIRNAME),
            '/mnt/files',
            'Dirname path element not matched'
        );
        self::assertEquals(
            PHPMailer::mb_pathinfo($a, PATHINFO_BASENAME),
            '飛兒樂 團光茫.mp3',
            'Basename path element not matched'
        );
        self::assertEquals(PHPMailer::mb_pathinfo($a, 'filename'), '飛兒樂 團光茫', 'Filename path element not matched');
        $a = 'c:\mnt\files\飛兒樂 團光茫.mp3';
        $q = PHPMailer::mb_pathinfo($a);
        self::assertEquals($q['dirname'], 'c:\mnt\files', 'Windows dirname not matched');
        self::assertEquals($q['basename'], '飛兒樂 團光茫.mp3', 'Windows basename not matched');
        self::assertEquals($q['extension'], 'mp3', 'Windows extension not matched');
        self::assertEquals($q['filename'], '飛兒樂 團光茫', 'Windows filename not matched');

        self::assertEquals(
            PHPMailer::filenameToType('abc.jpg?xyz=1'),
            'image/jpeg',
            'Query string not ignored in filename'
        );
        self::assertEquals(
            PHPMailer::filenameToType('abc.xyzpdq'),
            'application/octet-stream',
            'Default MIME type not applied to unknown extension'
        );

        //Line break normalization
        $eol = PHPMailer::getLE();
        $b1 = "1\r2\r3\r";
        $b2 = "1\n2\n3\n";
        $b3 = "1\r\n2\r3\n";
        $t1 = "1{$eol}2{$eol}3{$eol}";
        self::assertEquals(PHPMailer::normalizeBreaks($b1), $t1, 'Failed to normalize line breaks (1)');
        self::assertEquals(PHPMailer::normalizeBreaks($b2), $t1, 'Failed to normalize line breaks (2)');
        self::assertEquals(PHPMailer::normalizeBreaks($b3), $t1, 'Failed to normalize line breaks (3)');
    }
